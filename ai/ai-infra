import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import seaborn as sns

def simulate_blockchain_data(num_days=365, start_date='2021-01-01'):
    """Simulate blockchain transaction data for a given number of days."""
    np.random.seed(0)
    date_range = pd.date_range(start=start_date, periods=num_days, freq='D')
    data = {
        'timestamp': date_range,
        'transaction_value': np.random.randint(1, 100, num_days),
        'gas_price': np.random.randint(1, 50, num_days),
        'block_number': np.random.randint(10000, 11000, num_days),
        'transaction_count': np.random.randint(1, 10, num_days)
    }
    return pd.DataFrame(data)

df = simulate_blockchain_data()

def preprocess_data(df):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df.sort_values('timestamp', inplace=True)
    return df

df = preprocess_data(df)

def feature_engineering(df):
    df['day_of_week'] = df['timestamp'].dt.dayofweek
    df['hour_of_day'] = df['timestamp'].dt.hour
    df['month'] = df['timestamp'].dt.month
    df['day_of_month'] = df['timestamp'].dt.day
    return df

df = feature_engineering(df)

def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model, X_train, X_test, y_train, y_test

X = df[['gas_price', 'block_number', 'day_of_week', 'hour_of_day', 'month', 'day_of_month', 'transaction_count']]
y = df['transaction_value']
model, X_train, X_test, y_train, y_test = train_model(X, y)

def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    return predictions, mse, r2

predictions, mse, r2 = evaluate_model(model, X_test, y_test)
print("Mean Squared Error:", mse)
print("R-Squared Value:", r2)

def plot_results(y_test, predictions):
    plt.figure(figsize=(10, 6))
    sns.scatterplot(y_test, predictions)
    plt.xlabel('Actual Transaction Values')
    plt.ylabel('Predicted Transaction Values')
    plt.title('Actual vs Predicted Transaction Values')
    plt.show()

plot_results(y_test, predictions)

future_dates = pd.date_range(start=df['timestamp'].max() + timedelta(days=1), periods=30, freq='D')
future_data = simulate_blockchain_data(num_days=30, start_date=future_dates[0])
future_data = preprocess_data(future_data)
future_data = feature_engineering(future_data)

X_future = future_data[['gas_price', 'block_number', 'day_of_week', 'hour_of_day', 'month', 'day_of_month', 'transaction_count']]
future_predictions = model.predict(X_future)

def calculate_roi(investment, predicted_values, investment_duration):
    """Calculate the estimated ROI based on predicted values."""
    initial_value = predicted_values[:investment_duration].mean()
    final_value = predicted_values[-investment_duration:].mean()
    roi = ((final_value - initial_value) / initial_value) * 100
    return roi

user_investment = 10000  # Amount in USD
investment_duration = 30  # Duration in days

estimated_roi = calculate_roi(user_investment, future_predictions, investment_duration)
print(f"Estimated ROI for an investment of ${user_investment} over {investment_duration} days: {estimated_roi:.2f}%")

def plot_future_predictions(future_dates, future_predictions):
    """Plot the future predictions for transaction values."""
    plt.figure(figsize=(12, 6))
    sns.lineplot(future_dates, future_predictions)
    plt.xlabel('Date')
    plt.ylabel('Predicted Transaction Value')
    plt.title('Predicted Future Transaction Values')
    plt.show()

plot_future_predictions(future_dates, future_predictions)

def describe_data(df):
    """Describe the data for a better understanding."""
    return df.describe()

print(describe_data(df))

def recommend_yield_strategy(user_portfolio):
    """
    Recommend the best yield strategy based on the user's portfolio.
    """
    market_data = fetch_market_data()

    input_features = prepare_data_for_model(user_portfolio, market_data)

    model = make_pipeline(StandardScaler(), RandomForestClassifier())
    # In a real implementation, this model would be pre-trained
    model.fit(X_train, y_train)  # Placeholder for actual training

    predicted_strategy = model.predict(input_features)

    return predicted_strategy[0]

if __name__ == "__main__":
    # Simulate and process blockchain data
    df = simulate_blockchain_data()
    df = preprocess_data(df)
    df = feature_engineering(df)

    # Train and evaluate the model
    X = df[['gas_price', 'block_number', 'day_of_week', 'hour_of_day', 'month', 'day_of_month', 'transaction_count']]
    y = df['transaction_value']
    model, X_train, X_test, y_train, y_test = train_model(X, y)
    predictions, mse, r2 = evaluate_model(model, X_test, y_test)
    print("Mean Squared Error:", mse)
    print("R-Squared Value:", r2)
    plot_results(y_test, predictions)

    future_dates, future_data = calculate_future_values(df)
    future_predictions = model.predict(future_data)
    plot_future_predictions(future_dates, future_predictions)

    user_investment = 10000  # Amount in USD
    investment_duration = 30  # Duration in days
    estimated_roi = calculate_roi(user_investment, future_predictions, investment_duration)
    print(f"Estimated ROI for an investment of ${user_investment} over {investment_duration} days: {estimated_roi:.2f}%")

    user_portfolio = {'ETH': 5, 'DAI': 3000, 'BTC': 1}
    best_yield_strategy = recommend_yield_strategy(user_portfolio)
    print("Recommended Yield Strategy:", best_yield_strategy)
